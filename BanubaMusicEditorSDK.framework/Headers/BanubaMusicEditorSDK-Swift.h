// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef BANUBAMUSICEDITORSDK_SWIFT_H
#define BANUBAMUSICEDITORSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BanubaMusicEditorSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_PROTOCOL("_TtP20BanubaMusicEditorSDK9AudioItem_")
@protocol AudioItem
@property (nonatomic, readonly) int64_t id;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable title;
@end

@class ControlButtonConfig;
@class UIColor;
@class MusicEditorBackgroundConfiguration;

/// The Audio recorder view configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK33AudioRecorderViewControllerConfig")
@interface AudioRecorderViewControllerConfig : NSObject
- (nonnull instancetype)initWithRewindToStartButton:(ControlButtonConfig * _Nullable)rewindToStartButton playPauseButton:(ControlButtonConfig * _Nonnull)playPauseButton playerControlsHeight:(CGFloat)playerControlsHeight recordButton:(ControlButtonConfig * _Nonnull)recordButton backButtonImage:(NSString * _Nonnull)backButtonImage doneButtonImage:(NSString * _Nonnull)doneButtonImage dimViewColor:(UIColor * _Nonnull)dimViewColor additionalLabelColors:(UIColor * _Nonnull)additionalLabelColors startingRecordingTimerSeconds:(NSTimeInterval)startingRecordingTimerSeconds timerColor:(UIColor * _Nonnull)timerColor cursorColor:(UIColor * _Nonnull)cursorColor backgroundConfiguration:(MusicEditorBackgroundConfiguration * _Nonnull)backgroundConfiguration playerControlsBackgroundConfiguration:(MusicEditorBackgroundConfiguration * _Nonnull)playerControlsBackgroundConfiguration timelineCornerRadius:(CGFloat)timelineCornerRadius OBJC_DESIGNATED_INITIALIZER;
/// ControlButtonConfig setups rewind to start button
@property (nonatomic, strong) ControlButtonConfig * _Nullable rewindToStartButton;
/// ControlButtonConfig setups play pause button
@property (nonatomic, strong) ControlButtonConfig * _Nonnull playPauseButton;
/// Player controls height
@property (nonatomic) CGFloat playerControlsHeight;
/// ControlButtonConfig setups record button
@property (nonatomic, strong) ControlButtonConfig * _Nonnull recordButton;
/// Image name setups back button UIImage
@property (nonatomic, copy) NSString * _Nonnull backButtonImage;
/// Image name setups done button UIImage
@property (nonatomic, copy) NSString * _Nonnull doneButtonImage;
/// Dim view color
@property (nonatomic, strong) UIColor * _Nonnull dimViewColor;
/// Additional labels color
@property (nonatomic, strong) UIColor * _Nonnull additionalLabelColors;
/// Countdown to start recording
@property (nonatomic) NSTimeInterval startingRecordingTimerSeconds;
/// Timer color
@property (nonatomic, strong) UIColor * _Nonnull timerColor;
/// Cursor color
@property (nonatomic, strong) UIColor * _Nonnull cursorColor;
/// BackgroundConfiguration setups background view
@property (nonatomic, strong) MusicEditorBackgroundConfiguration * _Nonnull backgroundConfiguration;
/// BackgroundConfiguration setups player controls background view
@property (nonatomic, strong) MusicEditorBackgroundConfiguration * _Nonnull playerControlsBackgroundConfiguration;
/// Time line corner radius
@property (nonatomic) CGFloat timelineCornerRadius;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class AudioWaveConfiguration;
@class VoiceFilterConfiguration;
@protocol VoiceFilterProvider;

/// The Audio track line edit view controller configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK38AudioTrackLineEditViewControllerConfig")
@interface AudioTrackLineEditViewControllerConfig : NSObject
- (nonnull instancetype)initWithAudioWaveConfiguration:(AudioWaveConfiguration * _Nonnull)audioWaveConfiguration doneButtonImageName:(NSString * _Nonnull)doneButtonImageName doneButtonTintColor:(UIColor * _Nonnull)doneButtonTintColor sliderTintColor:(UIColor * _Nonnull)sliderTintColor draggersColor:(UIColor * _Nonnull)draggersColor draggerImageName:(NSString * _Nullable)draggerImageName trimHeight:(CGFloat)trimHeight trimBorderColor:(UIColor * _Nonnull)trimBorderColor trimBorderWidth:(CGFloat)trimBorderWidth cursorHeight:(CGFloat)cursorHeight dimViewColor:(UIColor * _Nonnull)dimViewColor mainLabelColors:(UIColor * _Nonnull)mainLabelColors additionalLabelColors:(UIColor * _Nonnull)additionalLabelColors cursorColor:(UIColor * _Nonnull)cursorColor draggersWidth:(CGFloat)draggersWidth draggersLineColor:(UIColor * _Nonnull)draggersLineColor draggersCornerRadius:(CGFloat)draggersCornerRadius draggersLineWidth:(CGFloat)draggersLineWidth draggersLineHeight:(CGFloat)draggersLineHeight numberOfLinesInDraggers:(NSInteger)numberOfLinesInDraggers draggerLinesSpacing:(CGFloat)draggerLinesSpacing draggersLineCornerRadius:(CGFloat)draggersLineCornerRadius backgroundConfiguration:(MusicEditorBackgroundConfiguration * _Nonnull)backgroundConfiguration voiceFilterConfiguration:(VoiceFilterConfiguration * _Nullable)voiceFilterConfiguration voiceFilterProvider:(id <VoiceFilterProvider> _Nullable)voiceFilterProvider OBJC_DESIGNATED_INITIALIZER;
/// AudioWaveConfiguration setups audio wave style
@property (nonatomic, strong) AudioWaveConfiguration * _Nonnull audioWaveConfiguration;
/// Image name setups done buttom UIImage
@property (nonatomic, copy) NSString * _Nonnull doneButtonImageName;
/// Done button tint color
@property (nonatomic, strong) UIColor * _Nonnull doneButtonTintColor;
/// Slider tint color
@property (nonatomic, strong) UIColor * _Nonnull sliderTintColor;
/// Draggers background color
@property (nonatomic, strong) UIColor * _Nonnull draggersColor;
/// Image name setups draggers additional UIImage
@property (nonatomic, copy) NSString * _Nullable draggerImageName;
/// Trim container height
@property (nonatomic) CGFloat trimHeight;
/// Trim container border lines color
@property (nonatomic, strong) UIColor * _Nonnull trimBorderColor;
/// Trim container border lines width
@property (nonatomic) CGFloat trimBorderWidth;
/// Cursor height
@property (nonatomic) CGFloat cursorHeight;
/// Dim view background color
@property (nonatomic, strong) UIColor * _Nonnull dimViewColor;
/// Main labels’ title color
@property (nonatomic, strong) UIColor * _Nonnull mainLabelColors;
/// Additional labels’ title color
@property (nonatomic, strong) UIColor * _Nonnull additionalLabelColors;
/// Cursor background color
@property (nonatomic, strong) UIColor * _Nonnull cursorColor;
/// Draggers’ view width
@property (nonatomic) CGFloat draggersWidth;
/// Draggers’ central line view color
@property (nonatomic, strong) UIColor * _Nonnull draggersLineColor;
/// Draggers’ view corner radius
@property (nonatomic) CGFloat draggersCornerRadius;
/// Draggers’ central line view width
@property (nonatomic) CGFloat draggersLineWidth;
/// Draggers’ central line view height
@property (nonatomic) CGFloat draggersLineHeight;
/// Number of draggers’ central lines
@property (nonatomic) NSInteger numberOfLinesInDraggers;
/// Draggers’ central lines spacing
@property (nonatomic) CGFloat draggerLinesSpacing;
/// Draggers’ central lines corner radius
@property (nonatomic) CGFloat draggersLineCornerRadius;
/// BackgroundConfiguration setups common container view background style
@property (nonatomic, strong) MusicEditorBackgroundConfiguration * _Nonnull backgroundConfiguration;
/// VoiceFilterConfiguration setups voice filter container view item style
@property (nonatomic, strong) VoiceFilterConfiguration * _Nullable voiceFilterConfiguration;
/// VoiceFilterProvider setups voice filters provider
@property (nonatomic, strong) id <VoiceFilterProvider> _Nullable voiceFilterProvider;
@property (nonatomic, readonly) BOOL isVoiceFilterHidden;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class UIFont;

/// The Audio wave configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK22AudioWaveConfiguration")
@interface AudioWaveConfiguration : NSObject
- (nonnull instancetype)initWithIsRandomWaveColor:(BOOL)isRandomWaveColor backgroundColor:(UIColor * _Nullable)backgroundColor waveBorderColor:(UIColor * _Nonnull)waveBorderColor waveCornerRadius:(CGFloat)waveCornerRadius waveLinesColor:(UIColor * _Nonnull)waveLinesColor borderWidth:(CGFloat)borderWidth height:(CGFloat)height maxWaveHeight:(CGFloat)maxWaveHeight audioTitleFont:(UIFont * _Nullable)audioTitleFont audioTitleColor:(UIColor * _Nullable)audioTitleColor bottomOffset:(CGFloat)bottomOffset OBJC_DESIGNATED_INITIALIZER;
/// Is random wave color enabled
@property (nonatomic) BOOL isRandomWaveColor;
/// Background color view
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// Time line border color
@property (nonatomic, strong) UIColor * _Nonnull waveBorderColor;
/// Time lime corner radius
@property (nonatomic) CGFloat waveCornerRadius;
/// Audio wave lines color
@property (nonatomic, strong) UIColor * _Nonnull waveLinesColor;
/// Time line border width
@property (nonatomic) CGFloat borderWidth;
/// Time line height
@property (nonatomic) CGFloat height;
/// Max audio wave height
@property (nonatomic) CGFloat maxWaveHeight;
/// Audio title font
@property (nonatomic, strong) UIFont * _Nullable audioTitleFont;
/// Audio title color
@property (nonatomic, strong) UIColor * _Nullable audioTitleColor;
/// Time line bottom offset
@property (nonatomic) CGFloat bottomOffset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum ControlButtonConfigType : NSInteger;

/// The Control button configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK19ControlButtonConfig")
@interface ControlButtonConfig : NSObject
/// Button type
@property (nonatomic) enum ControlButtonConfigType type;
/// Image name setups button’s normal state UIImage
@property (nonatomic, copy) NSString * _Nonnull imageName;
/// Image name setups button’s selected state UIImage
@property (nonatomic, copy) NSString * _Nullable selectedImageName;
/// \param type Button type
///
/// \param imageName Image name setups button’s normal state UIImage
///
/// \param selectedImageName Image name setups button’s selected state UIImage
///
- (nonnull instancetype)initWithType:(enum ControlButtonConfigType)type imageName:(NSString * _Nonnull)imageName selectedImageName:(NSString * _Nullable)selectedImageName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Control button type
typedef SWIFT_ENUM(NSInteger, ControlButtonConfigType, open) {
  ControlButtonConfigTypeReset = 0,
  ControlButtonConfigTypePlay = 1,
  ControlButtonConfigTypeDone = 2,
};

enum EditButtonConfigType : NSInteger;

/// The Edit button configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK16EditButtonConfig")
@interface EditButtonConfig : NSObject
/// Title font
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Button type
@property (nonatomic) enum EditButtonConfigType type;
/// Title
@property (nonatomic, copy) NSString * _Nonnull title;
/// Title color
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
/// Image name setups button’s UIImage
@property (nonatomic, copy) NSString * _Nonnull imageName;
/// \param font Title font
///
/// \param type Button type
///
/// \param title Title
///
/// \param titleColor Title color
///
/// \param imageName Image name setups button’s UIImage
///
- (nonnull instancetype)initWithFont:(UIFont * _Nonnull)font type:(enum EditButtonConfigType)type title:(NSString * _Nonnull)title titleColor:(UIColor * _Nonnull)titleColor imageName:(NSString * _Nonnull)imageName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Edit Button types
typedef SWIFT_ENUM(NSInteger, EditButtonConfigType, open) {
  EditButtonConfigTypeTrack = 0,
  EditButtonConfigTypeEffect = 1,
  EditButtonConfigTypeRecord = 2,
};

enum EditCompositionButtonConfigType : NSInteger;

/// The Editor composition button configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK27EditCompositionButtonConfig")
@interface EditCompositionButtonConfig : NSObject
/// Title font
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Button type
@property (nonatomic) enum EditCompositionButtonConfigType type;
/// Title
@property (nonatomic, copy) NSString * _Nonnull title;
/// Title color
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
/// Image name setups button’s normal state UIImage
@property (nonatomic, copy) NSString * _Nonnull imageName;
/// Image name setups button’s selected state UIImage
@property (nonatomic, copy) NSString * _Nullable selectedImageName;
/// \param font Title font
///
/// \param type Button type
///
/// \param title Title
///
/// \param titleColor Title color
///
/// \param imageName Image name setups button’s normal state UIImage
///
/// \param selectedImageName Image name setups button’s selected state UIImage
///
- (nonnull instancetype)initWithFont:(UIFont * _Nonnull)font type:(enum EditCompositionButtonConfigType)type title:(NSString * _Nonnull)title titleColor:(UIColor * _Nonnull)titleColor imageName:(NSString * _Nonnull)imageName selectedImageName:(NSString * _Nullable)selectedImageName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Edit composition button type
typedef SWIFT_ENUM(NSInteger, EditCompositionButtonConfigType, open) {
  EditCompositionButtonConfigTypeVoiceEffect = 0,
  EditCompositionButtonConfigTypeEdit = 1,
  EditCompositionButtonConfigTypeDelete = 2,
};

@protocol EffectSelectionViewControllerDelegate;

SWIFT_PROTOCOL("_TtP20BanubaMusicEditorSDK29EffectSelectionViewController_")
@protocol EffectSelectionViewController
@property (nonatomic, strong) id <EffectSelectionViewControllerDelegate> _Nullable delegate;
@end


SWIFT_PROTOCOL("_TtP20BanubaMusicEditorSDK37EffectSelectionViewControllerDelegate_")
@protocol EffectSelectionViewControllerDelegate
- (void)effectSelectionViewControllerWithViewController:(id <EffectSelectionViewController> _Nonnull)viewController didSelectFile:(NSURL * _Nonnull)url title:(NSString * _Nonnull)title id:(int64_t)id;
- (void)effectSelectionViewControllerDidCancelWithViewController:(id <EffectSelectionViewController> _Nonnull)viewController;
@end


@class MusicEditorTextButtonConfig;

/// The Main music editor view configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK29MainMusicViewControllerConfig")
@interface MainMusicViewControllerConfig : NSObject
- (nonnull instancetype)initWithEditButtons:(NSArray<EditButtonConfig *> * _Nonnull)editButtons editButtonsHeight:(CGFloat)editButtonsHeight editCompositionButtons:(NSArray<EditCompositionButtonConfig *> * _Nonnull)editCompositionButtons controlButtons:(NSArray<ControlButtonConfig *> * _Nonnull)controlButtons playerControlsHeight:(CGFloat)playerControlsHeight audioWaveConfiguration:(AudioWaveConfiguration * _Nonnull)audioWaveConfiguration mainLabelColors:(UIColor * _Nonnull)mainLabelColors additionalLabelColors:(UIColor * _Nonnull)additionalLabelColors speakerImageName:(NSString * _Nonnull)speakerImageName volumeLabel:(MusicEditorTextButtonConfig * _Nonnull)volumeLabel tracksLimit:(NSInteger)tracksLimit cursorColor:(UIColor * _Nonnull)cursorColor controlsBackgroundConfiguration:(MusicEditorBackgroundConfiguration * _Nonnull)controlsBackgroundConfiguration backgroundConfiguration:(MusicEditorBackgroundConfiguration * _Nonnull)backgroundConfiguration timelineCornerRadius:(CGFloat)timelineCornerRadius OBJC_DESIGNATED_INITIALIZER;
/// Array of adding buttons
@property (nonatomic, copy) NSArray<EditButtonConfig *> * _Nonnull editButtons;
/// Adding buttons container height
@property (nonatomic) CGFloat editButtonsHeight;
/// Array of edit composition buttons
@property (nonatomic, copy) NSArray<EditCompositionButtonConfig *> * _Nonnull editCompositionButtons;
/// Array of control buttons
@property (nonatomic, copy) NSArray<ControlButtonConfig *> * _Nonnull controlButtons;
/// Control buttons container height
@property (nonatomic) CGFloat playerControlsHeight;
/// AudioWaveConfiguration setups audio wave style
@property (nonatomic, strong) AudioWaveConfiguration * _Nonnull audioWaveConfiguration;
/// Color for main titles color
@property (nonatomic, strong) UIColor * _Nonnull mainLabelColors;
/// Color for additional titles color
@property (nonatomic, strong) UIColor * _Nonnull additionalLabelColors;
/// Image name setups speaker image view
@property (nonatomic, copy) NSString * _Nonnull speakerImageName;
/// TextButtonConfig setups volume label title style
@property (nonatomic, strong) MusicEditorTextButtonConfig * _Nonnull volumeLabel;
/// Number of maximum tracks
@property (nonatomic) NSInteger tracksLimit;
/// Cursor color
@property (nonatomic, strong) UIColor * _Nonnull cursorColor;
/// BackgroundConfiguration setups controls container background style
@property (nonatomic, strong) MusicEditorBackgroundConfiguration * _Nonnull controlsBackgroundConfiguration;
/// BackgroundConfiguration setups main view background style
@property (nonatomic, strong) MusicEditorBackgroundConfiguration * _Nonnull backgroundConfiguration;
/// Time line corner radius
@property (nonatomic) CGFloat timelineCornerRadius;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC20BanubaMusicEditorSDK24MusicAlertViewController")
@interface MusicAlertViewController : UIViewController
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end





/// Music Editor namespace
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK11MusicEditor")
@interface MusicEditor : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The Text button configuration
SWIFT_CLASS("_TtCC20BanubaMusicEditorSDK11MusicEditor27MusicEditorTextButtonConfig")
@interface MusicEditorTextButtonConfig : NSObject
/// Title font
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Title color
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Title
@property (nonatomic, copy) NSString * _Nonnull title;
- (nonnull instancetype)initWithFont:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color title:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Background configuration
SWIFT_CLASS("_TtCC20BanubaMusicEditorSDK11MusicEditor34MusicEditorBackgroundConfiguration")
@interface MusicEditorBackgroundConfiguration : NSObject
/// Layer’s corner radius
@property (nonatomic) CGFloat cornerRadius;
/// Background color
@property (nonatomic, strong) UIColor * _Nonnull color;
- (nonnull instancetype)initWithCornerRadius:(CGFloat)cornerRadius color:(UIColor * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class VideoTrackLineEditViewControllerConfig;

/// The Music Editor config
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK17MusicEditorConfig")
@interface MusicEditorConfig : NSObject
/// MainMusicViewControllerConfig setups main screen style
@property (nonatomic, strong) MainMusicViewControllerConfig * _Nonnull mainMusicViewControllerConfig;
/// VideoTrackLineEditViewControllerConfig setups video track line editing screen style
@property (nonatomic, strong) VideoTrackLineEditViewControllerConfig * _Nonnull videoTrackLineEditControllerConfig;
/// VideoTrackLineEditViewControllerConfig setups audio track line editing screen style
@property (nonatomic, strong) AudioTrackLineEditViewControllerConfig * _Nonnull audioTrackLineEditControllerConfig;
/// AudioRecorderViewControllerConfig setups audio recorder style
@property (nonatomic, strong) AudioRecorderViewControllerConfig * _Nonnull audioRecorderViewControllerConfig;
- (nonnull instancetype)init;
/// \param mainMusicViewControllerConfig MainMusicViewControllerConfig setups main screen style
///
/// \param videoTrackLineEditControllerConfig VideoTrackLineEditViewControllerConfig setups video track line editing screen style
///
/// \param audioTrackLineEditControllerConfig VideoTrackLineEditViewControllerConfig setups audio track line editing screen style
///
/// \param audioRecorderViewControllerConfig AudioRecorderViewControllerConfig setups audio recorder style
///
/// \param isAudioBrowserEnabled Is audio browser enabled. (audioBrowser framework exist only)
///
- (nonnull instancetype)initWithMainMusicViewControllerConfig:(MainMusicViewControllerConfig * _Nonnull)mainMusicViewControllerConfig videoTrackLineEditControllerConfig:(VideoTrackLineEditViewControllerConfig * _Nonnull)videoTrackLineEditControllerConfig audioTrackLineEditControllerConfig:(AudioTrackLineEditViewControllerConfig * _Nonnull)audioTrackLineEditControllerConfig audioRecorderViewControllerConfig:(AudioRecorderViewControllerConfig * _Nonnull)audioRecorderViewControllerConfig OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP20BanubaMusicEditorSDK34MusicEditorCountdownAnimatableView_")
@protocol MusicEditorCountdownAnimatableView
@property (nonatomic) NSInteger countdownDigit;
- (void)startWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)stop;
@end

@protocol TrackSelectionViewController;

SWIFT_PROTOCOL("_TtP20BanubaMusicEditorSDK40MusicEditorExternalViewControllerFactory_")
@protocol MusicEditorExternalViewControllerFactory
@property (nonatomic, strong) id <TrackSelectionViewController> _Nullable audioBrowserController;
- (id <TrackSelectionViewController> _Nullable)makeTrackSelectionViewControllerWithSelectedAudioItem:(id <AudioItem> _Nullable)selectedAudioItem SWIFT_WARN_UNUSED_RESULT;
- (id <EffectSelectionViewController> _Nullable)makeEffectSelectionViewControllerWithSelectedAudioItem:(id <AudioItem> _Nullable)selectedAudioItem SWIFT_WARN_UNUSED_RESULT;
- (id <MusicEditorCountdownAnimatableView> _Nullable)makeRecorderCountdownAnimatableView SWIFT_WARN_UNUSED_RESULT;
@end

@protocol TrackSelectionViewControllerDelegate;

SWIFT_PROTOCOL("_TtP20BanubaMusicEditorSDK28TrackSelectionViewController_")
@protocol TrackSelectionViewController
@property (nonatomic, strong) id <TrackSelectionViewControllerDelegate> _Nullable trackSelectionDelegate;
@end


SWIFT_PROTOCOL("_TtP20BanubaMusicEditorSDK36TrackSelectionViewControllerDelegate_")
@protocol TrackSelectionViewControllerDelegate
- (void)trackSelectionViewControllerWithViewController:(id <TrackSelectionViewController> _Nonnull)viewController didSelectFile:(NSURL * _Nonnull)url title:(NSString * _Nonnull)title id:(int64_t)id;
- (void)trackSelectionViewControllerDidCancelWithViewController:(id <TrackSelectionViewController> _Nonnull)viewController;
- (void)trackSelectionViewControllerWithViewController:(id <TrackSelectionViewController> _Nonnull)viewController didStopUsingTrackWithId:(int32_t)trackId;
@end




/// The Video track line editor view configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK38VideoTrackLineEditViewControllerConfig")
@interface VideoTrackLineEditViewControllerConfig : NSObject
- (nonnull instancetype)initWithDoneButtonImageName:(NSString * _Nonnull)doneButtonImageName doneButtonTintColor:(UIColor * _Nonnull)doneButtonTintColor sliderTintColor:(UIColor * _Nonnull)sliderTintColor mainLabelColors:(UIColor * _Nonnull)mainLabelColors additionalLabelColors:(UIColor * _Nonnull)additionalLabelColors backgroundConfiguration:(MusicEditorBackgroundConfiguration * _Nonnull)backgroundConfiguration height:(CGFloat)height OBJC_DESIGNATED_INITIALIZER;
/// Image name setups done button UIImage
@property (nonatomic, copy) NSString * _Nonnull doneButtonImageName;
/// Done button tint color
@property (nonatomic, strong) UIColor * _Nonnull doneButtonTintColor;
/// Slider tint color
@property (nonatomic, strong) UIColor * _Nonnull sliderTintColor;
/// Main labels color
@property (nonatomic, strong) UIColor * _Nonnull mainLabelColors;
/// Additional labels colors
@property (nonatomic, strong) UIColor * _Nonnull additionalLabelColors;
/// BackgroundConfiguration setups background view
@property (nonatomic, strong) MusicEditorBackgroundConfiguration * _Nonnull backgroundConfiguration;
/// Pop-up screen’s height
@property (nonatomic) CGFloat height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC20BanubaMusicEditorSDK11VoiceFilter")
@interface VoiceFilter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Voice filter configuration
SWIFT_CLASS("_TtC20BanubaMusicEditorSDK24VoiceFilterConfiguration")
@interface VoiceFilterConfiguration : NSObject
/// Container layer corner radius
@property (nonatomic) CGFloat cornerRadius;
/// UIImageView layer corner radius
@property (nonatomic) CGFloat imageCornerRadius;
/// Container selection state border line width
@property (nonatomic) CGFloat selectionBorderWidth;
/// Color for selection state
@property (nonatomic, strong) UIColor * _Nonnull selectionColor;
/// Title font
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Title text color
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Discard filter title
@property (nonatomic, copy) NSString * _Nullable noneFilterTitle;
/// Discard filter image name for UIImage
@property (nonatomic, copy) NSString * _Nonnull noneFilterImageName;
/// \param cornerRadius Container layer corner radius
///
/// \param imageCornerRadius UIImageView layer corner radius
///
/// \param selectionBorderWidth Container selection state border line width
///
/// \param selectionColor Color for selection state
///
/// \param font Title font
///
/// \param textColor Title text color
///
/// \param noneFilterTitle Discard filter title
///
/// \param noneFilterImageName Discard filter image name for UIImage
///
- (nonnull instancetype)initWithCornerRadius:(CGFloat)cornerRadius imageCornerRadius:(CGFloat)imageCornerRadius selectionBorderWidth:(CGFloat)selectionBorderWidth selectionColor:(UIColor * _Nonnull)selectionColor font:(UIFont * _Nonnull)font textColor:(UIColor * _Nonnull)textColor noneFilterTitle:(NSString * _Nullable)noneFilterTitle noneFilterImageName:(NSString * _Nonnull)noneFilterImageName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP20BanubaMusicEditorSDK19VoiceFilterProvider_")
@protocol VoiceFilterProvider
- (NSArray<VoiceFilter *> * _Nonnull)provideFilters SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
